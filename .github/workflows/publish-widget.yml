name: Publish Widget Artifact

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release name'
        required: false
        default: 'Widget Example Release'
      prerelease:
        description: 'Make this release a prerelease?'
        required: false
        default: 'false'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare widget artifact
        run: |
          chmod +x scripts/package_widget.sh || true
          ./scripts/package_widget.sh || true

      - name: Ensure GitHub Release exists (create or reuse)
        id: ensure_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG=${{ github.event.inputs.tag }}
          OWNER=${GITHUB_REPOSITORY%%/*}
          REPO=${GITHUB_REPOSITORY##*/}

          echo "Checking for existing release for tag=$TAG"
          resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$OWNER/$REPO/releases/tags/$TAG") || true

          if echo "$resp" | jq -e '.id' > /dev/null 2>&1; then
            upload_url=$(echo "$resp" | jq -r .upload_url | sed -e 's/{?name,label}//')
            echo "Found existing release, upload_url=$upload_url"
          else
            echo "No existing release, creating one"
            payload=$(jq -n --arg tag "$TAG" --arg name "${{ github.event.inputs.release_name }}" --arg body "Auto-published widget example zip" --argjson draft false --argjson prerelease $([[ "${{ github.event.inputs.prerelease }}" == 'true' ]] && echo true || echo false) '{ tag_name: $tag, name: $name, body: $body, draft: $draft, prerelease: $prerelease }')
            resp=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" -d "$payload" "https://api.github.com/repos/$OWNER/$REPO/releases")
            upload_url=$(echo "$resp" | jq -r .upload_url | sed -e 's/{?name,label}//')
            echo "Created release, upload_url=$upload_url"
          fi

          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
            echo "Failed to determine upload_url. Response: $resp"
            exit 2
          fi

          echo "upload_url=$upload_url" >> "$GITHUB_OUTPUT"

      - name: Upload widget artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.upload_url }}
          asset_path: artifacts/widget_example.zip
          asset_name: widget_example.zip
          asset_content_type: application/zip
